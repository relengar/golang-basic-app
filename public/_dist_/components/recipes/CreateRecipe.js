import './CreateRecipe.css.proxy.js';
/* src/components/recipes/CreateRecipe.svelte generated by Svelte v3.23.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text
} from "/web_modules/svelte/internal.js";

import axios from "/web_modules/axios.js";

function create_fragment(ctx) {
	let section;
	let h1;
	let t1;
	let form;
	let label0;
	let t3;
	let input0;
	let t4;
	let label1;
	let t6;
	let input1;
	let t7;
	let p;
	let t9;
	let t10_value = JSON.stringify(/*recipe*/ ctx[0]) + "";
	let t10;
	let mounted;
	let dispose;

	return {
		c() {
			section = element("section");
			h1 = element("h1");
			h1.textContent = "Create new recipe";
			t1 = space();
			form = element("form");
			label0 = element("label");
			label0.textContent = "Title";
			t3 = space();
			input0 = element("input");
			t4 = space();
			label1 = element("label");
			label1.textContent = "Content";
			t6 = space();
			input1 = element("input");
			t7 = space();
			p = element("p");
			p.innerHTML = `<button class="button svelte-1b2rh29">Submit</button>`;
			t9 = space();
			t10 = text(t10_value);
			attr(label0, "for", "title");
			attr(input0, "type", "text");
			attr(input0, "name", "title");
			attr(label1, "for", "content");
			attr(input1, "type", "text");
			attr(input1, "name", "content");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, h1);
			append(section, t1);
			append(section, form);
			append(form, label0);
			append(form, t3);
			append(form, input0);
			set_input_value(input0, /*recipe*/ ctx[0].title);
			append(form, t4);
			append(form, label1);
			append(form, t6);
			append(form, input1);
			set_input_value(input1, /*recipe*/ ctx[0].content);
			append(form, t7);
			append(form, p);
			append(section, t9);
			append(section, t10);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[2]),
					listen(input1, "input", /*input1_input_handler*/ ctx[3]),
					listen(form, "submit", prevent_default(/*submit*/ ctx[1]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*recipe*/ 1 && input0.value !== /*recipe*/ ctx[0].title) {
				set_input_value(input0, /*recipe*/ ctx[0].title);
			}

			if (dirty & /*recipe*/ 1 && input1.value !== /*recipe*/ ctx[0].content) {
				set_input_value(input1, /*recipe*/ ctx[0].content);
			}

			if (dirty & /*recipe*/ 1 && t10_value !== (t10_value = JSON.stringify(/*recipe*/ ctx[0]) + "")) set_data(t10, t10_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const recipe = {};

	function submit() {
		console.log(recipe);

		// axios.post('http://localhost:5000/api/recipes', recipe).then(console.log).catch(console.log)
		axios({
			method: "POST",
			url: "http://localhost:5000/api/recipes",
			data: recipe
		}).then(console.log).catch(console.log);
	}

	function input0_input_handler() {
		recipe.title = this.value;
		$$invalidate(0, recipe);
	}

	function input1_input_handler() {
		recipe.content = this.value;
		$$invalidate(0, recipe);
	}

	return [recipe, submit, input0_input_handler, input1_input_handler];
}

class CreateRecipe extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default CreateRecipe;