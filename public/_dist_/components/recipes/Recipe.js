/* src/components/recipes/Recipe.svelte generated by Svelte v3.23.0 */
import {
	SvelteComponent,
	append,
	destroy_each,
	detach,
	element,
	empty,
	handle_promise,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text
} from "/web_modules/svelte/internal.js";

import axios from "/web_modules/axios.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (24:4) {:catch error}
function create_catch_block(ctx) {
	let span;
	let t0;
	let t1_value = /*error*/ ctx[6] + "";
	let t1;

	return {
		c() {
			span = element("span");
			t0 = text("Error: Problem loading recipes - ");
			t1 = text(t1_value);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (17:4) {:then recipes}
function create_then_block(ctx) {
	let each_1_anchor;
	let each_value = /*recipes*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*recipesReq*/ 1) {
				each_value = /*recipes*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (18:8) {#each recipes as recipe}
function create_each_block(ctx) {
	let div;
	let h4;
	let t0_value = /*recipe*/ ctx[3].Title + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*recipe*/ ctx[3].Content + "";
	let t2;
	let t3;

	return {
		c() {
			div = element("div");
			h4 = element("h4");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h4);
			append(h4, t0);
			append(div, t1);
			append(div, p);
			append(p, t2);
			append(div, t3);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (15:23)          <span>Loading recipes...</span>     {:then recipes}
function create_pending_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "Loading recipes...";
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let t;
	let promise;

	let info = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 2,
		error: 6
	};

	handle_promise(promise = /*recipesReq*/ ctx[0], info);

	return {
		c() {
			section = element("section");
			t = text("RECIPES\n\n    ");
			info.block.c();
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, t);
			info.block.m(section, info.anchor = null);
			info.mount = () => section;
			info.anchor = null;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			{
				const child_ctx = ctx.slice();
				child_ctx[2] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			info.block.d();
			info.token = null;
			info = null;
		}
	};
}

function instance($$self) {
	async function getRecipes() {
		const resp = await axios.get("http://localhost:5000/api/recipes").catch(console.log);
		return resp.data;
	}

	const recipesReq = getRecipes();
	return [recipesReq];
}

class Recipe extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Recipe;